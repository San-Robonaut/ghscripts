//command: nmap
if params.len < 1 or params[0] == "-h" or params[0] == "--help" then exit("<b>Usage: megaScan [ip_address] (extra) </b>")	
if not is_valid_ip(params[0]) then exit("nmap: invalid ip address")
if not get_shell.host_computer.is_network_active then exit("nmap: can't connect. No internet access.")

metaxploit = include_lib("/lib/metaxploit.so")
if not metaxploit then
	metaxploit = include_lib(get_shell.host_computer.current_path + "/metaxploit.so")
	if not metaxploit then metaxploit = include_lib(home_dir + "/metaxploit.so")
end if
if not metaxploit then exit("Couldn't locate metaxploit. Please install (correctly).")

ipAddress = params[0]
isLanIp = is_lan_ip( ipAddress )

if isLanIp then
	router = get_router;
else 
	router = get_router( ipAddress )
end if

if router == null then exit("nmap: ip address not found")
ports = null

if not isLanIp then
	ports = router.used_ports
else
	ports = router.device_ports(ipAddress)
end if

if ports == null then exit("nmap: ip address not found")
if typeof(ports) == "string" then exit(ports)

if(ports.len == 0) then exit("Scan finished. No open ports.")

libs = {}

net_session = metaxploit.net_use(ipAddress)
if not net_session then exit("Couldn't Connect")
metalib = net_session.dump_lib
libs.push(ipAddress)

for ip in libs.indexes
	libs[ip] = {}
	metalib = metaxploit.net_use(ipAddress).dump_lib
	areas = metaxploit.scan(metalib)
	for b in areas
		libs[ip].push(b)
	end for
	for area in libs[ip].indexes
		libs[ip][area] = {}
		vulns = metaxploit.scan_address(metalib, area)
		vulns = vulns.split("Unsafe check: ")[1:-1]
		// list of names and conditions
		for vuln in vulns
			i = vulns.indexOf(vuln)
			vuln = vuln.split(".")[0].split(" ")[-1]
			vuln = vuln.replace("<b>", "").replace("</b>", "")
			vulns[i] = vuln
		end for
		libs[ip][area] = vulns
	end for
end for
// 55.198.17.50

extra = "newPass"
if params.len == 2 then extra = params[1]

results = []

for ip in libs.indexes
	metalib = metaxploit.net_use(ip).dump_lib
	for area in libs[ip].indexes
		for vuln in libs[ip][area]
			resone = metalib.overflow(area, vuln)
			restwo = metalib.overflow(area, vuln, extra)
			if resone then results.push(resone)
			if restwo then results.push(restwo)
		end for
	end for
end for

etcpasswd = function(result)
	passFile = result
	if passFile.has_permission("r") then
		if passFile.is_binary == true then
			print(passFile.name + " (" + passFile.path + ") is a binary")
			return
		end if
		if passFile == null then 
			print("Password file is empty.")
			return
		end if
		fileLocation = current_path
		createFile = get_shell.host_computer.File(fileLocation+"/file.txt")
		if createFile then createFile.delete
		get_shell.host_computer.touch(fileLocation, "file.txt")
		get_shell.host_computer.File(fileLocation+"/file.txt").set_content(result.get_content)
		createFile = get_shell.host_computer.File(fileLocation+"/file.txt")
	else
		print("Cannot open Password file")
		return
	end if
	if createFile == null then
		createFile.delete
		print("Downloaded password file is empty.")
		return
	end if
	
	get_shell.launch("/bin/decipher", fileLocation+"/file.txt")
end if
end function

newline = "\n"

fold = function(result)
	while result.path != "/"
		result = result.parent
	end while
	
	f = function(result)
		clear_screen
		content = {"folders":[], "files":[]}
		content["folders"] = result.get_folders
		content["files"] = result.get_files
		
		c = content["folders"] + content["files"]
		print("Listing files in " + result.path)
		if not result.path == "/" then info = ":0" + " <color=orange>" + result.parent.permissions + " " + result.parent.owner + " <color=#42f587>.. [folder]"
		if result.path == "/" then info = ":0" + " <color=orange>" + result.permissions + " " + result.owner + " <color=#42f587>.. [folder]"
		index = 1
		for obj in c
			color = "#42f587"
			if not obj.is_folder then color = "#429ef5"
			// :0 -rw-rw-r-- root ..
			// :1 -rw-rw-r-- root /etc/passwd
			// :2
			b = "text"
			if obj.is_binary then b = "binary"
			foof = "file"
			if obj.is_folder then foof = "folder"
			info = info + newline + ":" + index + " <color=orange>" + obj.permissions + " " + obj.owner + " <color=" + color + ">" + obj.path + " [" + foof + "] [" + b + "]"
			index = index + 1
		end for
		print(format_columns(info))
		print("<b>exit</b> to exit")
		input = user_input(">:")
		if input == "exit" then
			return
		else
			input = input.val
		end if
		if input == 0 then
			if not result.path == "/" then f(result.parent)
			if result.path == "/" then f(result)
		else if input <= c.len then
			handler = "folder"
			if input > content["folders"].len then handler = "file"
			input = input - 1
			if handler == "folder" then f(c[input])
			if handler == "file" then
				file = c[input]
				clear_screen
				print(file.path + newline * 2)
				print(file.get_content)
				user_input(":")
				f(result)
			end if
		else
			user_input("Index too high!")
			f(result)
		end if
	end function
	f(result)
end function

evalResult = function(result)
	if result == null then return
	type = typeof(result)
	print("\n" * 3)
	print("-" * 25)
	print(type[0].upper + type[1:])
	print("-" * 25)
	print("\n" * 3)
	if type == "shell" then
		fold(result.host_computer.File("/"))
		result.start_terminal
	end if
	if type == "computer" then
		user_input(":")
		fold(result.File("/"))
	end if
	if type == "file" then
		user_input(":")
		if not result.is_folder then
			// File Stuff
			fold(result.parent)
		else if result.is_folder then
			// Folder Stuff
			fold(result)
		end if
	end if
	if type == "router" then
		router = result
		ports = router.used_ports
		print("Scanning: ")
		print(format_columns("BSSID ESSID IP KERNEL_VERSION" + router.bssid_name + " " + router.essid_name + " " + router.public_ip + " " + router.kernel_version))
		print("Firewall rules: " + router.firewall_rules)
		print("Connected Machines: ")
		for ip in router.devices_lan_ip
			print(ip)
		end for
		info = "PORT STATE SERVICE VERSION LIB LAN"
		if(ports.len == 0) then 
			print("Scan finished. No open ports.")
			return
		end if
		for port in ports
			net_session = metaxploit.net_use(ipAddress, port.port_number)
			if not net_session then net_session = metaxploit.net_use(ipAddress)
			if not net_session then exit("Could not establish metaxploit net session")
			metalib = net_session.dump_lib
			service_info = router.port_info(port)
			lan_ips = port.get_lan_ip
			port_status = "OPEN"
			push = true
			for lib in libs
				if lib.lib_name == metalib.lib_name and lib.version == metalib.version then push = false
			end for
			if push == true then libs.push(metalib)
			
			if(port.is_closed and not isLanIp) then
				port_status = "CLOSED"
			end if
			info = info + "" + port.port_number + " " + port_status + " " + service_info + " " + metalib.lib_name + " " + lan_ips
		end for
		print(format_columns(info) + "")
	end if
	if type == "number" then print("Number: " + result)
end function

for result in results
	evalResult(result)
end for