// Usage info
if params.len == 0 or params[0] == "-h" or params[0] == "--help" then
	print("<b>Usage:</b> dbScan [-local / -online / -router] (ipAddress)")
	print("<b>dbScan -local</b> takes no further arguments")
	print("Online and Router Arguments")
	print("dbScan [-online / -router] [ipAddress]")
	exit()
end if


// Required stuff
newline = "\n"

findLibs = function()
	x = {"out":[]}
	x.find = function(folder)
		for f in folder.get_folders + folder.get_files
			if f.name[-3:] == ".so" then x.out.push(f)
			if is_folder(f) then x.find(f)
		end for
		return x.out
	end function
	return x.find(get_shell.host_computer.File("/"))
end function

// importing metaxploit for good
metaxploit = include_lib("/lib/metaxploit.so")
if not metaxploit then
	metaxploit = include_lib(current_path + "/metaxploit.so")
	if not metaxploit then metaxploit = include_lib(home_dir + "/metaxploit.so")
end if
if not metaxploit then exit("<color=orange>Cannot locate metaxploit, please install correctly")

comp = get_shell.host_computer
mode = params[0]


// actual code


readDB = function()
	if not comp.File(home_dir + "/db/exploits.db") then
		comp.touch(home_dir + "/db/", "exploits.db")
	end if
	edb = comp.File(home_dir + "/db/exploits.db")
	lines = edb.get_content.split(newline)
	
	exploits = {}
	for line in lines
		if line == "" or line == newline then continue
		if line.split("@").len <= 1 then continue
		lib = {}
		vuln = {}
		lib.name = line.split(":")[0].split("@")[0]
		lib.version = line.split(":")[0].split("@")[1]
		area = line.split(":")[1].split("@")[0]
		val = line.split(":")[1].split("@")[1]
		vuln[area] = [val]
		if exploits.hasIndex(lib.name) then
			if exploits[lib.name].hasIndex(lib.version) then
				if exploits[lib.name][lib.version].hasIndex(area) then
					exploits[lib.name][lib.version][area].push(val)
				else
					exploits[lib.name][lib.version].push(area)
					exploits[lib.name][lib.version][area] = [val]
				end if
			else
				exploits[lib.name].push(lib.version)
				exploits[lib.name][lib.version] = vuln
			end if
		else
			exploits.push(lib.name)
			exploits[lib.name] = {lib.version: vuln}
		end if
	end for
	print(exploits)
	return [exploits, edb]
end function

if mode == "-local" then
	// local lib scan
	libs = []
	for lib in findLibs
		libs.push(metaxploit.load(lib.path))
	end for
	
	es = readDB()
	exploits = es[0]
	edb = es[1]
	
	for metalib in libs
		lib = {}
		lib.name = metalib.lib_name
		lib.version = str(metalib.version)
		areas = metaxploit.scan(metalib)
		vulnas = {}
		for area in areas
			vulnas[area] = []
			vulns = metaxploit.scan_address(metalib, area)
			vulns = vulns.split("Unsafe check: ")[1:-1]
			for vuln in vulns
				i = vulns.indexOf(vuln)
				vuln = vuln.split(".")[0].split(" ")[-1]
				vuln = vuln.replace("<b>", "").replace("</b>", "")
				vulns[i] = vuln
			end for
			vulnas[area] = vulns
			vulns = vulnas
		end for
		if exploits.hasIndex(lib.name) then
			exploits[lib.name][lib.version] = vulns
		else
			exploits.push(lib.name)
			exploits[lib.name] = {lib.version: {}}
			exploits[lib.name][lib.version] = vulns
		end if
	end for
	edb.set_content("")
	for lib in exploits.indexes
		for version in exploits[lib].indexes
			for area in exploits[lib][version].indexes
				for vuln in exploits[lib][version][area]
					edb.set_content(edb.get_content + newline + lib + "@" + version + ":" + area + "@" + vuln)
				end for
			end for
		end for
	end for
else if mode == "-online" or mode == "-router" then
	if params.len <= 1 then exit("You need to provide an IP address")
	ipAddress = params[1]
	if not is_valid_ip(ipAddress) then exit("Not a valid IP")
	
	if mode == "-online" then
		// scan metalibs obtained from netsessions
		router = get_router( ipAddress )
		ports = router.device_ports(str(ipAddress))
		for port in ports
			if not port.is_closed == false then continue
			net_session = metaxploit.net_use(ipAddress, port.port_number)
			if not net_session then print("Couldn't establish metaxploit net session")
			libs.push(net_session.dump_lib)
		end for
		libs = []
		if not comp.File(home_dir + "/db/exploits.db") then
			comp.touch(home_dir + "/db/", "exploits.db")
		end if
		edb = comp.File(home_dir + "/db/exploits.db")
		lines = edb.get_content.split("\n")
		
		es = readDB()
		exploits = es[0]
		edb = es[1]
		
		for metalib in libs
			lib = {}
			lib.name = metalib.lib_name
			lib.version = str(metalib.version)
			areas = metaxploit.scan(metalib)
			vulnas = {}
			for area in areas
				vulnas[area] = []
				vulns = metaxploit.scan_address(metalib, area)
				vulns = vulns.split("Unsafe check: ")[1:-1]
				for vuln in vulns
					i = vulns.indexOf(vuln)
					vuln = vuln.split(".")[0].split(" ")[-1]
					vuln = vuln.replace("<b>", "").replace("</b>", "")
					vulns[i] = vuln
				end for
				vulnas[area] = vulns
				vulns = vulnas
			end for
			if exploits.hasIndex(lib.name) then
				exploits[lib.name][lib.version] = vulns
			else
				exploits.push(lib.name)
				exploits[lib.name] = {lib.version: {}}
				exploits[lib.name][lib.version] = vulns
			end if
		end for
		edb.set_content("")
		for lib in exploits.indexes
			for version in exploits[lib].indexes
				for area in exploits[lib][version].indexes
					for vuln in exploits[lib][version][area]
						edb.set_content(edb.get_content + newline + lib + "@" + version + ":" + area + "@" + vuln)
					end for
				end for
			end for
		end for
	else
		// scan metalibs obtained from netsessions without ports
		libs = []
		libs.push(metaxploit.net_use(ipAddress).dump_lib)
		if not comp.File(home_dir + "/db/exploits.db") then
			comp.touch(home_dir + "/db/", "exploits.db")
		end if
		edb = comp.File(home_dir + "/db/exploits.db")
		lines = edb.get_content.split("\n")
		
		es = readDB()
		exploits = es[0]
		edb = es[1]
		
		for metalib in libs
			lib = {}
			lib.name = metalib.lib_name
			lib.version = str(metalib.version)
			areas = metaxploit.scan(metalib)
			vulnas = {}
			for area in areas
				vulnas[area] = []
				vulns = metaxploit.scan_address(metalib, area)
				vulns = vulns.split("Unsafe check: ")[1:-1]
				for vuln in vulns
					i = vulns.indexOf(vuln)
					vuln = vuln.split(".")[0].split(" ")[-1]
					vuln = vuln.replace("<b>", "").replace("</b>", "")
					vulns[i] = vuln
				end for
				vulnas[area] = vulns
				vulns = vulnas
			end for
			if exploits.hasIndex(lib.name) then
				exploits[lib.name][lib.version] = vulns
			else
				exploits.push(lib.name)
				exploits[lib.name] = {lib.version: {}}
				exploits[lib.name][lib.version] = vulns
			end if
		end for
		edb.set_content("")
		for lib in exploits.indexes
			for version in exploits[lib].indexes
				for area in exploits[lib][version].indexes
					for vuln in exploits[lib][version][area]
						edb.set_content(edb.get_content + newline + lib + "@" + version + ":" + area + "@" + vuln)
					end for
				end for
			end for
		end for
	end if
else
	exit("<color=red>Invalid Mode!")
	end if